# Let's get some cool visuals out
import numpy as np
from keras.models import load_model
from keras.layers import Layer
from keras import backend as K
import tensorflow as tf
import matplotlib.pyplot as plt

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def softmax(x):
    c = np.max(x)
    Sig = np.sum(np.exp(x-c))
    x = np.exp(x-c)/Sig
    return x

#path2model = 'results/large/line/HANline.08-1.90.hdf5'
path2model = 'results/large/line/HANline.h5'
MAX_WORDS = 10 # max number of words in line
MAX_LINES = 60 # max number of lines in song
vocab_size = 30000 # and 1 for unknown, and 1 for mask
attention_size = 100
n_hidden = 50 # number of hidden states in one direction of bidirectional GRU/LSTM
embed_size = 100

#example = {"genre": "Alternative", "idxs": [[666, 16, 17, 540, 2019], [], [22, 57, 5, 3440, 2388, 4, 6, 3114, 8106, 6, 53], [7713, 5, 2884, 9, 1674, 645, 3, 4, 2, 525], [69, 57, 2, 30000, 12, 4844], [14686, 325, 4, 2, 314], [436, 0, 109, 347, 42, 1991, 1942, 40, 85, 16], [], [666, 16, 17, 540, 2019], [], [4572, 2104, 9, 2785, 738, 9, 388, 4, 181], [19315, 2, 1005, 35, 2134, 8569], [], [80, 31, 41, 105, 2, 121, 82, 75, 2, 30000], [306, 9106, 79, 5, 56, 31, 67, 105, 8, 82], [22, 32, 56, 14475, 16, 66, 1720, 401, 28, 2, 275, 4, 342], [80, 335, 463, 4, 2, 444, 13, 17, 92], [], [271, 30000, 11701, 8, 100, 34, 137, 56, 24, 582, 51], [551, 251, 4, 309, 3, 34, 5, 8451], [282, 1674, 1522, 3, 34, 5, 15962], [7427, 29, 17959, 1851], [112, 1, 134, 8, 923, 5, 128, 202, 16, 6], [551, 251, 4, 309, 3, 34, 5, 8451], [282, 1674, 1522, 3, 34, 5, 15962], [], [1160, 175, 2, 658, 12, 19299], [30000, 2930, 2, 15079], [331, 23279, 86, 5, 6688, 51, 13, 16514, 6788], [587, 2, 121, 24, 44, 5, 14030, 9, 31, 57, 2393, 426], [120, 860, 137, 3998, 35, 33, 12882], [], [80, 31, 41, 105, 2, 121, 82, 75, 2, 30000], [306, 9106, 79, 5, 56, 31, 67, 105, 8, 82], [22, 32, 56, 14475, 16, 66, 1720, 401, 28, 2, 275, 4, 342], [80, 335, 463, 4, 2, 444, 13, 17, 92], [], [271, 30000, 11701, 8, 100, 34, 137, 56, 24, 582, 51], [551, 251, 4, 309, 3, 34, 5, 8451], [282, 1674, 1522, 3, 34, 5, 15962], [7427, 29, 17959, 1851], [112, 1, 134, 8, 923, 5, 128, 202, 16, 6], [551, 251, 4, 309, 3, 34, 5, 8451], [282, 1674, 1522, 3, 34, 5, 15962], [], [271, 30000, 11701, 8, 100, 34, 137, 56, 24, 582, 51], [551, 251, 4, 309, 3, 34, 5, 8451], [282, 1674, 1522, 3, 34, 5, 15962], [7427, 29, 17959, 1851], [112, 1, 134, 8, 923, 5, 128, 202, 16, 6], [551, 251, 4, 309, 3, 34, 5, 8451], [282, 1674, 1522, 3, 34, 5, 15962], [], [666, 16, 17, 540, 2019], [], [43, 540, 24, 1837, 244, 1385, 1972], [5986, 2, 8040, 0, 1577, 27], [], [43, 540, 24, 1837, 244, 1385, 1972], [5986, 2, 8040, 0, 1577, 27], [], [43, 540, 24, 1837, 244, 1385, 1972], [5986, 2, 8040, 0, 1577, 27], [], [43, 540, 24, 1837, 244, 1385, 1972], [5986, 2, 8040, 0, 1577, 27], [], [271, 30000, 11701, 8, 100, 34, 137, 56, 24, 582, 51], [551, 251, 4, 309, 3, 34, 5, 8451], [282, 1674, 1522, 3, 34, 5, 15962], [7427, 29, 17959, 1851], [112, 1, 134, 8, 923, 5, 128, 202, 16, 6], [551, 251, 4, 309, 3, 34, 5, 8451], [282, 1674, 1522, 3, 34, 5, 15962], [], [271, 30000, 11701, 8, 100, 34, 137, 56, 24, 582, 51], [551, 251, 4, 309, 3, 34, 5, 8451], [282, 1674, 1522, 3, 34, 5, 15962], [7427, 29, 17959, 1851], [112, 1, 134, 8, 923, 5, 128, 202, 16, 6], [551, 251, 4, 309, 3, 34, 5, 8451], [282, 1674, 1522, 3, 34, 5, 15962]]}
#example = {"genre": "Pop", "idxs": [[122, 2, 1783], [1, 68, 313, 8, 140, 23, 3], [83, 31, 171, 21964], [5921, 12, 2, 6696, 6140], [47, 31, 38, 1085, 26, 186, 25], [30000, 3, 171, 3861, 191, 11, 5512], [15, 368, 153], [15, 31, 140, 359, 29, 2934], [], [1051, 8419, 44, 50, 1507], [30000, 2, 750], [30000, 17, 327, 29, 153, 6], [15, 188, 3, 1839, 17, 4094], [4437, 9, 77, 0, 30000, 251, 29, 2, 30000], [], [1051, 0, 105, 6, 4, 2, 318, 326], [18392, 379, 34, 2, 16649, 13, 4844], [145, 105, 6, 4, 2, 318, 326], [1, 61, 14, 1595, 192, 12, 17, 142], [15, 1, 32, 0, 31, 1954, 410, 732], [102, 31, 305, 53, 42, 474], [9153, 23, 1202, 28, 26980], [80, 236, 354, 6, 34, 1385, 20, 152, 181], [15, 105, 6, 4, 2, 318, 326], [], [179, 99, 23, 870], [47, 31, 2859, 32, 3158, 31, 229, 26, 1124, 25], [1, 32, 1720, 3299], [80, 44, 703, 82, 9, 88, 6, 822], [], [1051, 8419, 44, 50, 1507], [30000, 2, 750], [30000, 17, 327, 29, 153, 6], [15, 188, 3, 1839, 17, 4094], [4437, 9, 77, 0, 30000, 251, 29, 2, 30000], [], [1051, 0, 105, 6, 4, 2, 318, 326], [18392, 379, 34, 2, 8026, 13, 4844], [145, 105, 6, 4, 2, 318, 326], [1, 61, 14, 1595, 192, 12, 17, 142], [15, 1, 32, 0, 31, 1954, 410, 732], [102, 31, 305, 53, 42, 474], [9153, 23, 1202, 28, 26980], [80, 236, 354, 6, 34, 1385, 20, 152, 181], [15, 105, 6, 4, 2, 318, 326, 26, 1100, 0, 931, 0, 931, 25], [], [1938, 6, 34, 1385, 20, 152, 181], [15, 105, 6, 4, 2, 318, 326], [1051, 8419, 44, 50, 1507], [30000, 2, 750], [176, 17, 27, 2567, 211, 6], [15, 188, 3, 1839, 17, 4094], [4437, 9, 77, 0, 30000, 251, 29, 2, 30000], [], [1051, 0, 105, 6, 4, 2, 318, 326], [18392, 379, 34, 2, 8026, 13, 4844], [145, 105, 6, 4, 2, 318, 326], [1, 61, 14, 1595, 192, 12, 17, 142], [15, 1, 32, 0, 31, 1954, 410, 732], [102, 31, 305, 53, 42, 474], [9153, 23, 1202, 28, 26980], [80, 236, 26, 80, 236, 25, 354, 6, 34, 1385, 20, 152, 181], [15, 105, 6, 4, 2, 318, 326], [], [26, 1100, 25, 304, 6, 4, 2, 318, 326], [26, 1100, 25, 15, 105, 6, 4, 2, 318, 326], [26, 1100, 25, 1938, 6, 34, 1385, 20, 152, 181], [26, 1100, 25, 15, 105, 6, 4, 2, 318, 326, 26, 13240, 30000, 25]]}
#example = {"genre": "Pop", "idxs": [[89, 10, 2949, 6], [89, 10, 625, 6, 53], [89, 10, 77, 8, 7, 153], [183, 14, 140, 1023, 6, 536], [3598, 2, 525], [89, 10, 77, 352, 357], [1, 150, 45, 215, 9, 17, 357, 41, 1808], [698, 3, 41, 1023, 6, 536, 536, 536], [], [1, 181, 194, 56, 3, 305, 96], [89, 10, 231, 6, 219, 35, 6], [489, 0, 1, 19, 712], [], [432, 2, 989], [432, 2, 1933], [3600, 210, 7, 251, 4, 23, 2681], [1, 100, 8, 12, 11, 92], [3634, 165, 14, 1, 19, 1209], [22, 6], [22, 36, 21598, 194, 599], [1, 65, 248, 4, 215], [], [89, 10, 2949, 6], [89, 10, 625, 6, 53], [89, 10, 77, 8, 7, 153], [183, 14, 140, 1023, 6, 536], [3598, 2, 525], [89, 10, 77, 352, 357], [1, 150, 45, 215, 9, 17, 357, 41, 1808], [698, 3, 41, 1023, 6, 536, 536, 536], [], [1701, 858, 7210, 9568, 13, 286], [124, 2, 5917, 1, 177, 8991, 193], [47, 1, 19, 156, 2159], [848, 2, 1800], [15, 2, 325, 9, 2, 2791], [145, 4, 88, 6, 1262, 3, 53, 132], [47, 1, 19, 156, 2159], [1, 100, 8, 12, 11, 2386, 756, 1439], [95, 1, 19, 1209, 3, 6], [22, 36, 9739], [399, 599, 1, 65, 248, 4, 215], [], [89, 10, 2949, 6], [89, 10, 625, 6, 53], [89, 10, 77, 8, 7, 153], [183, 14, 140, 1023, 6, 536], [3598, 2, 525], [89, 10, 77, 352, 357], [1, 150, 45, 215, 9, 17, 357, 41, 1808], [698, 3, 41, 1023, 6, 536, 536, 536], [], [5706, 3, 90, 3, 20, 10, 192, 82], [2591, 1, 2203, 14, 1, 76, 10, 105, 82], [5643, 51, 90, 1, 76, 10, 220, 16, 4, 3], [5706, 3, 90, 3, 20, 10, 192, 82], [2591, 1, 2203, 14, 1, 76, 10, 105, 82], [5643, 51, 90, 1, 76, 10, 220, 16, 4, 3], [], [89, 10, 2949, 6], [89, 10, 625, 6, 53], [89, 10, 77, 8, 7, 153], [183, 14, 140, 1023, 6, 536], [3598, 2, 525], [89, 10, 77, 352, 357], [1, 150, 45, 215, 9, 17, 357, 41, 1808], [698, 3, 41, 1023, 6, 536, 536, 536], [], [74, 0, 139, 3, 41, 1023, 6, 536, 0, 106], [1333]]}
#example = {"genre": "Pop Latino", "idxs": [[886, 30000, 5, 11138], [4077, 8303, 7425, 1077], [886, 6, 4041, 5, 3987], [30000, 4041, 873, 742], [80, 5, 7295, 398, 522], [], [692, 10496, 21871], [103, 30000, 59, 4273], [423, 98, 30000, 60, 30000, 0], [7412, 30000, 60, 30000, 0], [5545, 4640, 6, 23707, 5, 814], [], [2323, 17652, 0, 714, 30000], [450, 30000, 59, 308, 0, 398, 59, 12300], [30000, 1755], [3893, 714, 16854, 2232, 5032, 0, 722, 6730, 5454], [5545, 22408, 60, 2196, 0, 714, 18779, 30000], [423, 5627, 522, 2983], [8124, 5, 559, 60, 522, 1836, 8324], [103, 559, 60, 522, 30000, 48], [], [30000, 13465, 7116, 0], [103, 12674, 398, 5, 6539, 0], [30000, 1841, 59, 30000, 0, 1646, 30000, 0, 30000], [30000, 5, 11138], [423, 2733, 2034, 3824, 0], [28618, 2122, 20767, 1270, 0], [1475, 21777, 522, 2449, 0, 60, 6, 24640, 10166], [30000, 1836, 22408, 60, 522, 22487, 48], [], [2323, 17652, 0, 714, 30000], [450, 30000, 59, 308, 0, 398, 59, 12300], [30000, 1755], [3893, 714, 16854, 2232, 5032, 0, 722, 6730, 5454], [5545, 22408, 60, 2196, 0, 714, 18779, 30000], [423, 5627, 522, 2983, 48], [8124, 5, 559, 60, 522, 1836, 8324], [103, 559, 60, 522, 30000, 48], [], [423, 5627, 199, 338, 1847, 30000, 18952], [4897, 2525, 24929, 30000, 26814, 48], [423, 873, 30000, 20, 60, 522, 1881, 16360], [], [2323, 17652, 0, 714, 30000], [450, 30000, 59, 308, 0, 398, 59, 12300], [30000, 1755], [3893, 714, 16854, 2232, 5032, 0, 722, 6730, 5454], [5545, 22408, 60, 2196, 0, 714, 18779, 30000], [423, 5627, 522, 2983, 48], [8124, 5, 559, 60, 522, 1836, 8324], [103, 559, 60, 522, 30000, 48]]}
#example = {"genre": "Hip-Hop/Rap", "idxs": [[30000], [30000], [2776], [], [1391, 3383, 9450, 0, 30000, 0, 349, 2711], [13636, 415, 6, 13015, 161, 23411, 416, 58, 3706, 367, 170, 1273, 22335, 6519, 162], [1391, 13363, 340, 4838, 0, 59, 58, 2932, 0, 367, 1447, 14785], [684, 3675, 0, 680, 791, 60, 11509, 546, 3079, 1876, 28774, 48], [], [10296, 0, 311, 4785, 1550, 4096, 17934, 13951, 3328, 59, 30000], [376, 11769, 1447, 725, 589], [865, 565, 3625, 30000, 701, 2528, 3027, 660, 174, 30000], [448, 1226, 58, 10056, 3255, 493, 60, 311, 30000, 0, 367, 3235, 1435, 21563, 680], [6277, 3548, 557, 30000, 1130, 546, 13693, 58, 30000], [1391, 3383, 1648, 59, 14801], [3378, 493, 199, 13395, 1204, 234, 30000, 26, 30000, 30000, 25], [2219, 234, 13182, 1353, 2690, 311, 30000, 0, 6955, 0], [4659, 60, 18055, 9236, 0, 1123, 187, 1631, 30000, 48], [2215, 6805, 30000, 0, 311, 12946, 5, 14269, 0, 312, 15623, 0], [30000, 3250, 0, 30000, 1353, 58, 3706], [376, 11841, 416, 234, 13494, 367, 416, 234, 30000], [2194, 2774, 9450, 567, 565, 2774, 419, 48], [376, 5165, 174, 27400, 367, 6429, 234, 30000], [376, 546, 3938, 281, 5, 504, 3618, 415, 3340, 567, 5564, 6, 6664, 7000], [2194, 5177, 311, 3097, 187, 13112, 0, 187, 786, 60, 311, 8484, 1922, 1215, 0], [376, 546, 13977, 281, 30000, 48], [915, 19714, 367, 234, 30000, 0, 30000, 2285, 187, 30000], [448, 784, 660, 281, 30000, 0, 3512, 557, 30000, 5, 544, 682], [], [7939, 1376, 565, 60, 340, 30000, 0, 733, 8853, 5, 3300, 234, 14079], [3378, 349, 58, 17543, 660, 58, 6848, 0, 725, 1264, 660, 3300, 234, 7203], [30000, 3079, 1130, 660, 416, 234, 30000, 0, 6852, 58, 3120, 170, 30000], [319, 2781, 415, 4650, 1924, 19754, 1204, 5357, 4838, 416, 234, 3101], [1391, 546, 3510, 1447, 30000, 11150, 863, 1369, 24628], [376, 8989, 2595, 3328, 23177, 0, 187, 30000, 367, 234, 30000], [376, 947, 174, 4476, 613, 546, 1887, 565, 60, 170, 30000, 30000], [915, 7993, 30000, 416, 187, 2786, 3328, 2421, 206, 6163, 340, 30000], [], [1391, 504, 8833, 234, 22071, 0, 3300, 234, 9843, 1435, 5, 2595, 504, 6369], [30000, 311, 30000, 493, 1435, 367, 1163, 25265, 0, 701, 234, 1895, 59, 504, 3618], [1391, 504, 1447, 30000, 0, 30000, 1435, 60, 311, 4063, 504, 849], [1061, 30000, 0, 5860, 311, 58, 28782, 700, 349, 660, 504, 4478], [221, 58, 3120, 6, 10944, 3647, 907, 0, 784, 311, 8989, 30000], [17991, 1123, 340, 10469, 10931, 0, 311, 2616, 60, 1311, 1895, 30000], [1916, 2456, 493, 907, 0, 5134, 1419, 2421, 6, 913, 2787], [449, 170, 6, 7297, 234, 12002, 30000, 680, 187, 1524, 700, 416, 174, 25758], [5664, 0, 311, 947, 1392, 30000, 0, 12878, 2528, 3548, 660, 58, 15877], [15440, 7264, 947, 30000, 660, 58, 2781, 415, 6, 913, 30000], [431, 1526, 187, 1212, 705, 1392, 4550, 0, 823, 16670, 3554, 30000], [11433, 158, 13648, 60, 170, 12637, 0, 1414, 1876, 8273, 4687, 5814, 2285, 416, 30000], [], [7939, 1376, 565, 60, 340, 30000, 0, 733, 8853, 5, 3300, 234, 14079], [3378, 349, 58, 17543, 660, 58, 6848, 0, 725, 1264, 660, 3300, 234, 7203], [30000, 3079, 1130, 660, 416, 234, 30000, 0, 6852, 58, 3120, 170, 30000], [319, 2781, 415, 4650, 1924, 19754, 1204, 5357, 4838, 416, 234, 3101], [1391, 546, 3510, 1447, 30000, 11150, 863, 1369, 24628], [376, 8989, 2595, 3328, 23177, 0, 187, 30000, 367, 234, 30000], [376, 947, 174, 4476, 613, 546, 1887, 565, 60, 170, 30000, 30000], [915, 7993, 30000, 416, 187, 2786, 3328, 2421, 206, 6163, 340, 30000], [], [1557, 9105, 415, 199, 27965, 0, 613, 17735, 60, 660, 58, 2004], [2215, 22484, 5, 3300, 234, 3618, 59, 30000, 30000], [1557, 13986, 0, 340, 21865, 0, 312, 14962, 415, 30000, 172, 1142], [30000, 4238, 234, 4838, 0, 3496, 28067, 2366, 3776, 30000], [992, 1435, 311, 7204, 23914], [21706, 22143, 2762, 2694, 30000, 22326, 0], [4250, 3618, 158, 30000, 416, 58, 30000], [448, 349, 10032, 1130, 5, 6866, 0, 22143, 1648, 477, 30000], [30000, 58, 665, 3926, 30000, 1226, 1435, 913, 58, 30000], [], [7939, 1376, 565, 60, 340, 30000, 0, 733, 8853, 5, 3300, 234, 14079], [3378, 349, 58, 17543, 660, 58, 6848, 0, 725, 1264, 660, 3300, 234, 7203], [30000, 3079, 1130, 660, 416, 234, 30000, 0, 6852, 58, 3120, 170, 30000], [319, 2781, 415, 4650, 1924, 19754, 1204, 5357, 4838, 416, 234, 3101], [1391, 546, 3510, 1447, 30000, 11150, 863, 1369, 24628], [376, 8989, 2595, 3328, 23177, 0, 187, 30000, 367, 234, 30000], [376, 947, 174, 4476, 613, 546, 1887, 565, 60, 170, 30000, 30000], [915, 7993, 30000, 416, 187, 2786, 3328, 2421, 206, 6163, 340, 30000], [], [6104], [30000], [915, 14079, 0, 565, 60, 340, 30000], [2776]]}
#example = {"genre": "Rock", "idxs": [[135, 7, 5, 128, 108, 9, 94, 4999, 12, 11, 165], [151, 7, 5, 360, 12, 2, 20351, 9, 94, 563, 4, 168], [399, 1561, 12, 11, 372, 35, 169, 7873, 4, 2427], [124, 1, 38, 4, 77, 126, 8], [], [22, 235, 6, 4, 464], [15, 1, 19, 1397, 21, 42, 802], [145, 147, 6, 5, 330], [195, 322, 7, 2558], [], [151, 7, 38, 5, 334, 627, 9, 94, 3623, 258, 637], [47, 3, 76, 10, 61, 143, 3, 36, 251, 35, 17, 222, 37, 17, 20351], [793, 739, 24, 1227, 30000, 301, 8, 7, 614, 13, 235], [15, 29, 1, 38, 4, 77, 126, 8], [], [22, 235, 6, 4, 464], [15, 1, 19, 1397, 21, 42, 802], [145, 147, 6, 5, 330], [195, 322, 7, 2558], [], [123, 0, 30000, 0, 119, 3, 55, 1591, 40, 1575], [22, 55, 1591, 211, 5, 519, 6989, 30000], [1, 129, 34, 4, 5105, 17, 222, 211, 5, 30000, 2778, 3716], [47, 3, 129, 1516, 133, 6, 29, 126, 8], [], [22, 235, 6, 4, 464], [15, 1, 19, 1397, 21, 42, 802], [145, 147, 6, 5, 330], [195, 322, 7, 2558]]}
#example = {"genre": "German Pop", "idxs": [[815, 7698, 1089, 6969], [30000, 1436, 1022, 657, 276], [1920, 30000, 274, 1246, 3256], [30000, 679, 40, 1413], [5138, 15486, 1114, 762, 1113, 5855, 12836, 29980], [14816, 30000, 10268, 0, 274, 7698, 9573], [], [1292, 5128, 30000], [1292, 5128, 30000], [], [533, 52, 1687, 25108], [402, 1346, 762, 8728], [5519, 12, 181, 12617], [815, 1246, 1436, 276], [4200, 8069, 1413], [5519, 2062, 23195], [], [1292, 5128, 30000], [1292, 5128, 30000], [], [1070, 14664, 12, 578, 30000, 30000, 5046], [3337, 5915, 880, 264, 2176, 935, 0, 30000, 762], [402, 30000, 7494, 2477, 578, 14199, 1113, 935], [402, 30000, 679, 274, 17122, 1140, 1436, 1314], [], [1292, 5128, 30000], [1292, 5128, 30000], [], [533, 52, 1687, 25108], [402, 1346, 762, 8728], [5519, 12, 181, 12617], [815, 1246, 1436, 276], [4200, 8069, 1413], [5519, 2062, 23195], [], [1292, 5128, 30000], [1292, 5128, 30000], [], [533, 52, 1687, 25108], [402, 1346, 762, 8728], [5519, 12, 181, 12617], [815, 1246, 1436, 276], [4200, 8069, 1413], [5519, 2062, 23195], [], [1292, 5128, 30000], [1292, 5128, 30000]]}
#example = {"genre": "World", "idxs": [[23887, 9495, 3794, 0, 30000, 0, 30000], [10234, 45, 1886, 5744, 5597, 10227, 30000], [12099, 10227, 30000, 0, 30000, 30000], [30000, 98, 30000, 0, 30000, 98, 30000], [30000, 98, 30000, 30000, 59, 5038], [23887, 9495, 3794, 0, 30000, 0, 30000], [], [30000, 30000, 11771, 3213, 3302, 1077, 7955], [30000, 30000, 0, 1836, 2288, 30000], [7508, 2288, 30000, 0, 9747, 3210, 1119, 18108], [19210, 10227, 4060, 652, 338, 2927, 16744], [1654, 338, 2927, 16744, 12674, 3302, 30000], [30000, 30000, 1836, 2288, 30000], [], [30000, 593, 29345, 652, 24112, 33, 30000], [7598, 3558, 26814, 0, 3302, 5032, 0, 3302, 18604], [9828, 5032, 3302, 18604, 0, 22177, 60, 30000], [512, 1307, 593, 30000, 652, 8649, 60, 11644], [1654, 8649, 60, 11644, 0, 1450, 919, 6, 8634], [30000, 722, 22028, 652, 338, 5251, 25176]]}
# Finding country
#not bad #example = {"genre": "Country", "idxs": [[1, 19, 1750, 175, 236, 0, 6513, 29, 617, 586], [95, 7, 456, 386, 1, 20, 10, 62, 4, 23, 219], [135, 7, 479, 1935, 21, 78, 0, 384, 9, 888, 596], [2591, 1, 5011, 12256, 157, 85, 16, 2, 1011], [], [492, 0, 84, 0, 84, 0, 9, 1, 20, 10, 32, 173, 1, 20, 42, 4, 310], [492, 0, 84, 0, 84, 0, 1, 32, 3, 36, 35, 362, 425], [], [47, 12, 11, 165, 171, 1048, 12, 11, 627], [15, 8, 7, 2680, 243, 16, 2, 22970, 1913], [22, 38, 17, 638, 16, 239, 0, 427, 6366, 16, 325], [1, 68, 67, 460, 0, 3, 5368, 11, 2747, 9, 2083, 8, 153, 11, 222], [15, 17, 6555, 2257, 37, 9, 53, 11, 82], [30000, 21, 243, 0, 27194, 21, 37, 2, 1190], [12256, 147, 520, 93, 1, 99, 377, 3, 82, 175], [], [80, 0, 1, 55, 111, 1400, 1672, 5662, 12, 2, 270, 3298], [256, 1, 413, 1171, 3, 9, 427, 1231, 11, 92], [1, 240, 105, 53, 29, 352, 2309, 75, 11, 775], [8509, 31, 227, 166, 10, 1058, 42, 888, 1088], [], [492, 0, 84, 0, 84, 0, 9, 1, 3447, 32, 173, 1, 44, 2875, 88, 3, 54], [492, 0, 84, 0, 84, 0, 1, 32, 21503, 68, 368, 82], [], [47, 12, 11, 165, 171, 1048, 12, 11, 627], [15, 8, 7, 2680, 243, 16, 2, 22970, 1913], [22, 38, 17, 638, 16, 239, 0, 427, 6366, 16, 325], [1, 68, 67, 460, 0, 3, 5368, 11, 2747, 9, 2083, 8, 153, 11, 222], [15, 17, 6555, 2257, 37, 9, 53, 11, 82], [30000, 21, 243, 0, 27194, 21, 37, 2, 1190], [12256, 147, 520, 93, 1, 99, 377, 3, 82, 175], [], [47, 12, 11, 165, 171, 1048, 12, 11, 627], [15, 8, 7, 2680, 243, 16, 2, 22970, 1913], [22, 38, 17, 638, 16, 239, 0, 427, 6366, 16, 325], [1, 68, 67, 460, 0, 3, 5368, 11, 2747, 9, 2083, 8, 153, 11, 222], [15, 17, 6555, 2257, 37, 9, 53, 11, 82], [30000, 21, 243, 0, 27194, 21, 37, 2, 1190], [12256, 147, 520, 93, 1, 99, 377, 3, 82, 175]]}
# tractor! example = {"genre": "Country", "idxs": [[399, 2172, 104, 78, 7, 5, 2247, 1658, 13, 1290], [95, 2654, 82, 4, 5, 2588, 1350, 35, 12716, 7501], [49, 7, 38, 216, 8930, 30000, 21, 73, 37, 1018], [288, 30000, 12, 2, 82, 0, 30000, 53], [135, 7, 5, 334, 325, 773, 90, 20, 10, 23, 17935], [49, 7, 44, 1137, 658, 9, 507, 470, 53, 16, 2, 4457], [], [197, 3, 41, 85, 98, 3, 57, 0, 78, 114, 10, 33, 1423, 4084], [145, 148, 30000, 3680, 1474, 14, 3, 110, 4, 32], [89, 10, 1176, 35, 2, 5714, 94, 41, 50, 258, 381], [89, 10, 460, 4, 1382, 2, 3028, 233, 51, 13, 2, 938], [102, 8, 1284, 4, 2680, 67, 44, 222, 4, 2, 9553], [256, 1137, 658, 9, 507, 57, 470, 53, 16, 2, 4457], [], [22, 41, 65, 5, 518, 13, 595, 12, 5, 713, 1189, 973], [47, 78, 7, 148, 189, 3, 41, 20, 890, 352, 561, 7949], [501, 10, 33, 3348, 56, 0, 114, 10, 33, 1596, 4051], [145, 1137, 658, 9, 507, 470, 53, 16, 2, 4457], [], [5668, 7, 111, 16, 154, 17462, 114, 10, 390, 20730, 29, 1388], [1180, 157, 70, 390, 593, 3611, 53, 4, 2, 10302], [24705, 7882, 7, 5450, 44, 2083, 37, 12, 5, 11351], [740, 94, 441, 119, 4, 768, 593, 93, 163, 32, 46, 1, 381], [1653, 9711, 7, 788, 21, 1018, 90, 94, 20, 10, 381, 33, 2892], [49, 7, 44, 1137, 658, 9, 507, 470, 53, 16, 2, 4457], [], [635, 88, 7, 50, 53, 618], [1191, 51, 13, 14, 884]]}
# woah example = {"genre": "Country", "idxs": [[1, 44, 1946, 11, 6318], [1613, 104, 1, 292, 11, 2377], [1, 19, 30000, 153, 2, 357, 0, 1], [89, 10, 100, 5, 709, 34, 6, 232, 315], [], [1, 140, 23, 5, 2890], [102, 1, 157, 1, 52, 500], [47, 1, 76, 10, 414, 678, 2919], [15, 1, 32, 64, 24, 71, 2, 56], [183], [], [43, 534, 24, 1, 19, 573, 4, 1534], [4189, 14, 3, 36, 141], [5083, 24, 2, 534, 866, 4029, 51, 26, 2771, 25], [408, 10, 641, 4, 552, 46, 1, 19, 328], [408, 10, 224, 46, 1, 19, 859, 51, 1018], [4722, 24, 78, 7, 33, 1115, 82, 64], [1, 553, 1, 4537, 1194, 119, 4, 469, 5, 128, 202], [], [1459, 555, 4, 1596], [179, 92, 51, 16, 11, 4237], [1459, 527, 16, 972, 42, 53, 90], [1, 134, 3, 36, 6513, 16, 4, 6], [], [4722, 24, 1, 19, 573, 4, 1534], [4189, 14, 3, 36, 141], [5083, 24, 2, 534, 866, 4029, 51, 26, 2771, 25], [408, 10, 641, 4, 552, 46, 1, 19, 328], [408, 10, 224, 46, 1, 19, 859, 51, 1018], [4722, 24, 78, 7, 33, 1115, 82, 64], [197, 0, 1, 553, 1, 4537, 1194, 119, 4, 469, 5, 128, 202], [], [1, 19, 1209, 42, 1704], [201, 194, 588, 1, 77], [2140, 1, 149, 5, 202, 2512], [432, 71, 1064, 310, 96], [183], [], [43, 534, 24, 1, 19, 573, 4, 1534], [4189, 14, 3, 36, 141], [5083, 24, 2, 534, 866, 4029, 51], [408, 10, 641, 4, 552, 46, 1, 19, 328], [408, 10, 224, 46, 1, 19, 859, 51, 1018], [4722, 24, 78, 7, 33, 1115, 82, 64], [197, 0, 1, 553, 1, 4537, 1194, 119, 4, 469, 5, 128, 202]]}
#GOT IT COUNTRY example = {"genre": "Country", "idxs": [[1, 19, 424, 3, 55, 411, 11, 6470, 8, 7, 29, 153, 42, 1112, 344], [47, 78, 7, 5, 128, 709, 13, 325, 536, 29, 14, 878], [22, 32, 119, 588, 656, 141], [], [902, 12, 2, 101, 3, 171, 5, 745, 103, 13049], [1628, 7, 128, 136, 0, 672, 46, 57, 3, 1006, 21], [2804, 21, 632, 5996, 21, 17, 659, 53], [69, 39, 105, 5, 380, 16, 2, 686, 326, 13, 344], [], [102, 3, 62, 5, 302, 284, 188, 72, 3, 38, 8], [288, 5, 302, 2732, 2125, 21, 12, 2, 14982, 21, 518], [304, 3, 4, 2, 279, 326, 13, 2, 2557], [237, 3, 114, 10, 91, 45, 150, 45, 85, 82], [183, 1, 19, 5, 294, 1297, 9, 774, 1339, 13, 8], [22, 36, 5, 300, 136, 57, 3, 424, 3, 150, 45, 380], [201, 6, 91, 45, 1522, 148, 545, 0, 91, 45, 86, 148, 2022], [102, 3, 62, 5, 302, 284], [1531, 5, 302, 284], [], [197, 1, 39, 23, 51, 117, 17, 10688, 66, 17, 2519, 9, 2467, 625, 53], [22, 41, 1616, 16, 51, 14, 852, 695, 9], [69, 39, 50, 16, 51, 13, 344], [1, 39, 228, 37, 29, 11, 8524, 410], [69, 39, 816, 53, 143, 2, 1643, 474, 1275], [1, 39, 65, 3, 82, 244, 2, 10858, 11634], [570, 17, 2519, 9, 922, 114, 10, 38, 182, 32], [], [102, 3, 62, 5, 302, 284, 188, 72, 3, 38, 8], [288, 5, 302, 2732, 2125, 21, 12, 2, 14982, 21, 518], [304, 3, 4, 2, 279, 326, 13, 2, 2557], [237, 3, 114, 10, 91, 45, 150, 45, 85, 82], [183, 1, 19, 5, 294, 1297, 9, 774, 1339, 13, 8], [22, 36, 5, 300, 136, 57, 3, 424, 3, 150, 45, 380, 35, 6], [794, 45, 1522, 148, 545, 0, 91, 45, 86, 148, 2022], [102, 3, 62, 5, 302, 284], [1531, 5, 302, 284], [6468, 153, 109], [], [102, 3, 62, 5, 302, 284, 188, 72, 3, 38, 8], [288, 5, 302, 2732, 2125, 21, 12, 2, 14982, 21, 518], [304, 3, 4, 2, 279, 326, 13, 2, 2557], [237, 3, 114, 10, 91, 45, 150, 45, 85, 82], [183, 1, 19, 5, 294, 1297, 9, 774, 1339, 13, 8], [22, 36, 5, 300, 136, 57, 3, 424, 3, 150, 45, 380, 35, 6], [794, 45, 1522, 148, 545, 0, 91, 45, 86, 148, 2022], [102, 3, 62, 5, 302, 284], [], [1812, 284], [570, 3, 32, 3, 62, 5, 302, 284]]}

# Finding pop

# ooh rock/pop example = {"genre": "Pop", "idxs": [[492], [74, 0, 5169, 2817, 0, 439], [2444, 6, 53], [83, 87, 52, 44, 5, 1015], [1043, 1047, 171, 30000], [], [30000], [164, 184, 2659, 79, 81, 66, 87, 336, 211, 344], [6922, 81, 5169, 2817], [1044, 5169, 2817], [], [2271, 5, 580, 225, 240, 23, 1897, 12, 4807], [492, 0, 439, 439, 439, 439], [492, 439, 439, 439, 439, 439], [26, 30000, 5169, 2817, 25], [], [1, 129, 309, 81, 624, 7070, 211, 977, 7070], [102, 1, 99, 26, 93, 1, 99, 25], [123, 1354, 166, 10, 88, 6], [183, 70, 77, 14, 87, 7, 33, 131], [120, 7, 5, 5169, 2817, 0, 623, 5, 5169, 2817], [839, 1, 27, 81, 40], [1, 76, 10, 88, 81, 32], [], [492, 439, 439, 439, 84], [492, 439, 439, 439, 439, 439, 84], [5705, 4750, 4750, 4750, 4750, 0, 5169, 2817], [1, 27, 3, 44, 70, 73, 3, 57], [492, 439, 439, 439, 84, 0, 5169, 2817, 0, 439], [492, 439, 439, 439, 84, 0, 5169, 2817, 0, 439]]}
#predicts pop latino when pop
# example = {"genre": "Pop", "idxs": [[1715, 2667, 0, 521, 4061], [758, 3206, 33, 12367, 20795], [2800, 5243, 0, 163, 290, 1563], [221, 58, 559, 2664, 60, 4144, 199, 705], [323, 17648, 59, 6882], [217, 58, 4276, 199, 18925, 59, 17375], [1765, 58, 30000, 230, 190, 30000], [319, 4682, 33, 6, 4337, 7919], [], [4796, 920, 0, 6, 30000, 808, 920], [684, 7459, 59, 1317, 30000], [2965, 33, 199, 2886, 185, 1264], [1617, 920, 0, 6, 30000, 808, 920], [30000, 290, 60, 4064, 363, 30000, 478, 885, 780], [], [394, 60, 873, 158, 94, 24638, 0], [394, 60, 1118, 158, 94, 30000], [4796, 158, 1187, 8226], [], [30000, 59, 308, 4806, 478, 1962, 172, 190, 1398], [319, 5605, 59, 30000, 5, 1129, 0], [450, 2449, 185, 3200, 59, 785, 1707, 1670, 885], [30000, 59, 308, 0, 4806, 478, 1962, 172, 190, 559], [217, 2802, 5, 1811, 290, 12701], [449, 4071, 6, 26032, 59, 1317, 8699, 1405, 920], [], [217, 1663, 60, 3990, 363, 2005], [319, 9172, 30000, 190, 1707], [323, 2768, 5069, 172, 949, 4104], [323, 21464, 3258, 59, 1811], [], [217, 33, 1563, 5785, 5802, 59, 1317, 8426], [3984, 3648, 199, 13129, 172, 949, 30000], [323, 3538, 185, 6373, 59, 919, 6658], [9092, 30000, 3457, 5, 190], [], [4796, 920, 0, 6, 30000, 808, 920], [684, 7459, 59, 1317, 30000], [2965, 33, 199, 2886, 185, 1264], [4796, 920, 0, 6, 30000, 808, 920], [30000, 290, 60, 4064, 363, 30000, 478, 885, 780], [], [394, 60, 873, 158, 94, 24638, 0], [394, 60, 1118, 158, 94, 30000], [4796, 158, 1187, 8226], [], [30000, 59, 308, 4806, 478, 1962, 172, 190, 1398], [319, 5605, 59, 30000, 5, 1129, 0], [450, 2449, 185, 3200, 59, 785, 1707, 1670, 885], [30000, 59, 308, 0, 4806, 478, 1962, 172, 190, 559], [217, 2802, 5, 1811, 290, 12701], [449, 4071, 6, 26032, 59, 1317, 8699, 1405, 920], [2784, 920, 0, 1405, 920], [1617, 920, 0, 808, 920], [2784, 920]]}
# not bad example = {"genre": "Pop", "idxs": [[5116], [83, 3, 36, 328, 530], [15, 3, 44, 20, 10, 32, 143, 4, 257, 4], [6203], [102, 17, 92, 7, 111, 860], [15, 3, 100, 34, 3, 36, 29, 219], [102, 3, 110, 250, 4, 224, 12], [102, 3, 36, 435, 28, 5, 223, 4, 2074, 3, 175], [145, 192, 263], [22, 36, 223, 5, 1007, 2824, 212, 3, 32], [22, 240, 32], [], [1, 19, 68, 91, 45, 88, 3, 53], [1, 19, 184, 91, 45, 1300, 3, 37], [15, 66, 3, 36, 328, 292], [1, 67, 184, 168, 3, 27], [1, 19, 68, 91, 45, 305, 96], [1, 19, 184, 91, 45, 65, 17, 82], [15, 93, 210, 425, 3, 41, 184, 1254, 16, 14], [83, 3, 110, 6], [1, 921, 1, 67, 68, 88, 3, 53], [], [7468], [1, 67, 86, 3, 912], [102, 3, 177, 100, 34, 904], [1716], [1, 67, 220, 3, 422], [22, 166, 10, 23, 219, 732], [102, 3, 110, 362, 4, 224, 12], [102, 3, 36, 3124, 28, 5, 265, 4, 2074, 3, 175], [145, 105, 11, 265, 9, 1, 166, 10, 88, 3, 54], [1, 388, 3, 32], [], [1, 19, 68, 91, 45, 88, 3, 53], [1, 19, 184, 91, 45, 1300, 3, 37], [15, 66, 3, 36, 328, 292], [1, 67, 184, 168, 3, 27], [1, 19, 68, 91, 45, 305, 96], [1, 19, 184, 91, 45, 65, 17, 82], [15, 93, 210, 425, 3, 41, 184, 1254, 16, 14], [], [1, 19, 68, 91, 45, 88, 3, 53], [1, 19, 184, 91, 45, 1300, 3, 37], [15, 66, 3, 36, 328, 292], [1, 67, 184, 168, 3, 27], [1, 19, 68, 91, 45, 305, 96], [1, 19, 184, 91, 45, 65, 17, 82], [15, 93, 210, 425, 3, 41, 184, 1254, 16, 14], [83, 3, 110, 6], [1, 921, 1, 67, 68, 88, 3, 53], [], [501, 10, 68, 91, 45, 88, 3, 53], [], [102, 3, 110, 250, 4, 224, 12], [102, 3, 100, 3, 55, 3313, 2, 283, 13, 2, 474], [89, 10, 23, 712, 0, 1, 39, 184, 2074, 3, 175], [22, 240, 32], [], [1, 19, 68, 91, 45, 88, 3, 53], [1, 19, 184, 91, 45, 1300, 3, 37], [15, 66, 3, 36, 328, 292], [1, 67, 184, 168, 3, 27], [1, 19, 68, 91, 45, 305, 96], [1, 19, 184, 91, 45, 65, 17, 82], [15, 93, 210, 425, 3, 41, 184, 1254, 16, 14], [], [1, 19, 68, 91, 45, 88, 3, 53], [1, 19, 184, 91, 45, 1300, 3, 37], [15, 66, 3, 36, 328, 292], [1, 67, 184, 168, 3, 27], [1, 19, 68, 91, 45, 305, 96], [1, 19, 184, 91, 45, 65, 17, 82], [15, 93, 210, 425, 3, 41, 184, 1254, 16, 14], [83, 3, 110, 6], [1, 921, 1, 67, 68, 88, 3, 53], [501, 10, 68, 251, 88, 3, 53], [501, 10, 68, 251, 88, 3, 53]]}
#also not bad example = {"genre": "Pop", "idxs": [[102, 2, 101, 347, 14, 3, 317, 231], [176, 6, 23, 2, 525, 4, 17, 532], [102, 2, 101, 347, 14, 3, 100, 1186], [176, 6, 23, 2, 7631, 3, 110], [74, 0, 93, 3, 573, 12, 27, 24, 5, 1512], [15, 2, 1422, 4, 667, 24, 11, 97], [498, 6, 3636, 0, 377, 29, 2, 6869], [2444, 6, 2, 735, 0, 1, 67, 71, 257], [15, 66, 70, 3795, 254, 90, 11, 1097], [89, 10, 3, 810, 0, 284, 0, 20, 10, 3, 295], [47, 66, 70, 517, 0, 155, 52, 2, 63], [289, 38, 3, 27], [176, 8, 23, 6], [], [102, 3, 177, 227, 17, 260, 779], [176, 6, 23, 2, 260, 588, 3, 77], [15, 93, 107, 347, 0, 90, 3, 1228, 248], [1, 67, 23, 2, 405, 4, 1597], [74, 93, 531, 24, 5, 524, 249], [47, 352, 3316, 20, 10, 65, 339, 1088], [15, 70, 1767, 3, 51, 0, 3795, 3, 33, 1179], [1, 67, 85, 53, 0, 93, 10344, 16, 11, 936], [15, 66, 2, 1143, 228, 6, 5, 487], [195, 1064, 29, 1367, 37, 28, 3], [1, 2859, 192, 82], [47, 66, 70, 517, 0, 155, 180, 3, 27], [176, 8, 23, 6], [], [176, 8, 23, 6, 14, 3, 134, 13], [83, 254, 2084, 3, 4, 147, 8, 37], [176, 8, 23, 6, 14, 67, 8808, 17, 286], [798, 2, 1005, 255, 51, 13, 2, 314], [15, 2, 975, 1458, 53, 12, 4844], [176, 8, 23, 6, 0, 14, 3, 134, 13], [176, 8, 23, 0, 2, 63, 14, 3, 27], [798, 2, 1448, 906, 687, 12, 1235], [15, 370, 2108, 51, 13, 315], [176, 8, 23, 6, 0, 88, 8, 23, 6], [43, 63, 14, 3, 27], [], [176, 8, 23, 6], [176, 8, 23, 6], [], [176, 8, 23, 6, 0, 88, 8, 23, 6], [176, 8, 23, 6, 0, 88, 8, 23, 6], [74, 88, 8, 23, 6]]}

# not bad example = {"genre": "Pop", "idxs": [[83, 1, 5346, 11, 1222], [1, 730, 2068], [89, 10, 62, 4, 61, 2, 3532], [1, 62, 4, 61, 531], [22, 77, 99, 3, 1021, 5, 275, 28, 6], [1, 157, 551, 806, 1, 2859, 20, 14, 10960], [], [83, 1, 54, 175], [1, 6523, 4, 422, 2, 378], [1, 68, 590, 113], [80, 329, 35, 6], [408, 10, 3, 61], [], [1, 20, 10, 65], [1415, 16, 11, 165], [1415, 16, 11, 165], [1, 20, 8, 28], [1, 20, 8, 28, 2, 27], [], [1, 20, 10, 65], [1415, 16, 11, 165], [1415, 16, 11, 165], [1, 20, 8, 28], [1, 20, 8, 28, 2, 27], [], [1, 20, 8, 28, 2, 27], [], [1, 20, 8, 28, 2, 27], [], [600, 20, 10, 50, 6, 279], [1, 150, 45, 167, 8, 1057], [1, 32, 46, 14, 25067], [1, 19, 71, 1538], [600, 41, 3, 86, 42, 429, 28, 6], [183, 1, 19, 71, 5, 5305, 1, 67, 429, 995, 17, 2911], [], [83, 1, 54, 175], [1, 6523, 4, 422, 2, 378], [1, 68, 590, 113], [80, 329, 35, 6], [408, 10, 3, 61], [], [1, 20, 10, 65], [1415, 16, 11, 165], [1415, 16, 11, 165], [1, 20, 8, 28], [1, 20, 8, 28, 2, 27], [], [1, 20, 10, 65], [1415, 16, 11, 165], [1415, 16, 11, 165], [1, 20, 8, 28], [1, 20, 8, 28, 2, 27], [], [1, 20, 8, 28, 2, 27], [1, 20, 8, 28, 2, 27], [], [83, 2, 262, 67, 527], [89, 10, 3, 12410], [112, 1, 65, 33, 269, 16, 11, 165], [112, 269, 16, 11, 165], [112, 269, 16, 11, 165], [112, 1, 65, 65, 269, 16, 11, 165], [], [83, 2, 262, 67, 527], [89, 10, 3, 12410], [112, 1, 65, 33, 269, 16, 11, 165], [112, 269, 16, 11, 165], [112, 269, 16, 11, 165], [112, 1, 65, 65, 269, 16, 11, 165], [], [145, 27], [], [1415, 16, 11, 165], [1415, 16, 11, 165], [1, 20, 8, 28], [1, 20, 8, 28, 2, 27], [], [1, 20, 10, 65], [1415, 16, 11, 165], [1415, 16, 11, 165], [1, 20, 8, 28], [1, 20, 8, 28, 2, 27], [], [1, 20, 8, 28, 2, 27], [1, 20, 8, 28, 2, 27]]}
# yous example = {"genre": "Pop", "idxs": [[288, 182, 50, 81], [707, 3, 32, 2, 121, 24, 401], [406, 3, 167, 37], [1558, 3, 61, 24, 5586], [15, 3], [22, 32, 46, 3, 57], [1562, 253], [22, 67, 54, 168], [], [183, 3, 38, 2, 104], [115, 223, 37, 2, 314], [30000, 12, 820, 13, 194, 663], [103, 3404, 538], [207, 1627, 24, 5, 1179], [293, 70, 418, 3, 645, 37], [879, 37, 0, 748, 37, 29, 2, 73], [], [30000], [30000], [30000], [30000], [30000], [30000], [30000], [30000], [], [80, 109, 31, 54], [30000, 8, 46, 29, 3, 859], [666, 16, 17, 277], [74, 229, 4, 86, 8, 22650], [15, 3], [1295, 46, 3, 57], [1562, 253], [22, 67, 54, 168], [], [183, 3, 38, 2, 104], [115, 223, 37, 2, 314], [30000, 12, 820, 13, 194, 663], [103, 3404, 538], [207, 1627, 24, 5, 1179], [293, 70, 418, 3, 645, 37], [879, 37, 0, 748, 37, 29, 2, 73], [], [30000], [30000], [30000], [30000], [30000], [30000], [30000], [30000], [], [30000], [30000], [30000], [30000], [30000], [30000], [30000], [30000], [], [183, 3, 38, 2, 104], [115, 223, 37, 2, 314], [103, 30000, 12, 820, 13, 194, 663], [103, 3404, 538], [207, 1627, 24, 5, 1179], [293, 70, 418, 3, 645, 37], [879, 37, 0, 748, 37, 29, 2, 73], [], [186, 3, 65, 4, 273, 37, 29, 2, 73], [186, 3, 65, 4, 273, 37, 29, 2, 73], [186, 3, 65, 4, 273, 37, 29, 2, 73], [186, 3, 65, 4, 273, 37, 29, 2, 73], [186, 3, 65, 4, 273, 37, 29, 2, 73]]}
# predicts country example = {"genre": "Pop", "idxs": [[3309, 12595, 0, 5920, 104], [15, 3, 9, 1, 57, 527, 12, 2419], [399, 607, 7983], [241, 5, 998, 211, 169, 1067], [], [576, 11, 268, 44, 2, 270], [241, 5, 1179, 1368, 773], [3783, 11, 142, 35, 2, 846], [432, 29, 14, 541, 1283, 2, 4032], [], [237, 78, 24, 210, 90, 1577, 248, 12, 6], [], [124, 79, 413, 137, 3187, 30000], [1, 114, 10, 548, 339, 4, 552], [1, 55, 1785, 0, 851], [1, 159, 4, 105, 488, 779, 1253, 3], [2452, 53, 29, 2, 805, 244, 3], [20615, 17, 265, 12, 239, 9, 4171, 4, 4632, 8], [43, 1155, 14, 1932, 6, 23, 2, 63, 263, 3], [], [102, 78, 10477, 5, 1893, 3384], [19628, 5, 354, 14, 7189, 2, 400], [3535, 28, 6, 0, 300, 98, 521], [22, 454, 6, 12, 995, 2, 17331], [], [80, 1, 67, 27, 3, 1162, 585, 11, 315, 57, 307], [], [124, 79, 413, 137, 3187, 30000], [1, 114, 10, 548, 339, 4, 552], [1, 55, 1785, 0, 851, 0], [1, 159, 4, 105, 488, 779, 1253, 3], [2452, 53, 29, 2, 805, 244, 3], [20615, 17, 265, 12, 239, 9, 4171, 4, 4632, 8], [43, 1155, 14, 1932, 6, 23, 2, 63, 263, 3], [], [1, 67, 27, 3, 1162, 585, 11, 315, 57, 307], [], [124, 79, 413, 137, 3187, 30000], [1, 114, 10, 548, 339, 4, 552], [1, 55, 1785, 0, 851, 0], [1, 159, 4, 105, 488, 779, 1253, 3], [2452, 53, 29, 2, 805, 244, 3], [20615, 17, 265, 12, 239, 9, 4171, 4, 4632, 8], [43, 1155, 14, 1932, 6, 23, 2, 63, 263, 3], [], [43, 63, 263, 3], [43, 63, 263, 3]]}

# Finding hip-hop/rap
# not bad example = {"genre": "Hip-Hop/Rap", "idxs": [[1, 178, 623, 5, 30000], [43, 5515, 697, 161, 1988, 976, 18014, 162], [1, 178, 623, 5, 30000], [43, 5515, 697, 161, 1988, 976, 18014, 162], [80, 85, 9, 2064, 53, 4, 13779], [1938, 778, 13, 11, 6189, 4, 277, 10030], [43, 911, 24, 30000, 0, 2, 965, 13, 30000, 40, 23, 30000], [15, 365, 1030, 30000], [], [179, 114, 10, 5, 5325, 152, 30000], [30000, 2905, 24, 258, 0, 71, 5, 2509, 2948], [47, 12, 2, 706, 228, 8, 3236, 4348], [15, 20, 71, 481, 17, 832, 3158, 3, 2818, 28], [600, 2127, 1597, 6], [1, 149, 4, 147, 204, 303, 4, 2, 28203], [707, 10, 32, 14, 1, 52, 749], [1777, 104, 1, 7899, 34, 30000, 0, 9011, 0, 30000], [6180, 125, 0, 2473, 21, 51, 35, 30000, 1472, 30000], [122, 2, 82, 13, 2, 903, 31, 298, 3248], [698, 258, 341, 301, 70, 675], [15, 155, 180, 21328, 9, 180, 10, 8188, 9, 2343, 253], [47, 30000, 1032, 85, 405], [30000, 51, 109, 24, 788, 21, 1902, 153, 11617], [197, 93, 2, 10504, 976, 15851, 2, 747], [358, 6, 173, 1, 38, 182, 32, 46, 5, 1149, 3758, 24, 830, 30], [635, 0, 911, 40, 9399], [43, 9479, 4, 177, 430, 5, 30000], [1, 19, 16, 2, 706, 30000, 30000], [15, 35, 2, 2021, 1, 19, 1973, 34, 30000, 0, 30000], [49, 7, 5, 11686, 13, 2, 30000], [19630, 16, 2, 526, 11304, 21, 9, 28669], [4601, 8, 29, 0, 111, 5, 544, 13, 8, 29], [89, 10, 50, 8, 2721, 93, 1, 19, 16, 5, 843, 1685, 66, 1, 19, 30000], [], [1, 178, 623, 5, 30000], [43, 5515, 697, 161, 1988, 976, 18014, 162], [1, 178, 623, 5, 30000], [43, 5515, 697, 161, 1988, 976, 18014, 162], [], [7775, 21, 1018, 117, 2, 3270], [29081, 126, 46, 7, 37, 35, 5, 12060], [69, 41, 703, 53, 79, 2, 1732, 0, 90, 405], [22, 38, 182, 354, 2, 12786, 836, 0, 8, 7, 16851, 4, 2, 2655], [], [123, 341, 277, 6, 119, 200, 4, 809, 8, 35], [15, 46, 4, 20, 66, 2, 2358, 52, 2, 30000], [1160, 2, 3551, 153, 2, 8669, 4, 5, 10921], [2986, 21, 51, 2, 2707, 14677, 21, 34, 5250, 19399], [293, 2, 364, 24, 11, 2685], [1, 307, 390, 40, 355, 283, 37, 16, 2, 30000], [13476, 21, 2, 627, 893, 8, 668, 53], [15, 64, 1, 61, 770, 21, 90, 10117, 0, 30000, 0, 443, 42], [30000, 12, 2, 30000], [17165, 12, 2, 16451, 9, 2, 378, 30000], [498, 6, 2, 1151, 226, 0, 265, 948], [1466, 76, 10, 1151, 386, 70, 38, 990, 23225], [80, 35, 5, 1553, 13, 2, 265], [1002, 2185, 938, 93, 1, 3149, 160, 429], [16695, 5, 1341, 13, 3659], [89, 10, 229, 4, 359, 4, 6, 3158, 3, 359, 4, 204, 405], [122, 287, 31, 858], [15, 8, 114, 10, 272, 14021, 34, 144], [16844, 614, 13, 30000, 16, 2, 2263], [115, 30000, 1, 77, 46, 7, 37, 12, 2, 1959], [5950, 2016, 614, 13, 30000], [3203, 21, 269, 711, 341, 14, 2975, 30000], [4125, 21, 12, 5, 3331, 758, 24453], [13924, 10818, 152, 2, 30000, 30000], [246, 30], [], [1, 178, 623, 5, 30000], [43, 5515, 697, 161, 1988, 976, 18014, 162], [1, 178, 623, 5, 30000], [43, 5515, 697, 161, 1988, 976, 18014, 162], [80, 85, 9, 2064, 53, 4, 13779], [1938, 778, 13, 11, 6189, 4, 277, 10030], [43, 911, 24, 30000, 0, 2, 965, 13, 30000, 40, 23, 30000], [15, 365, 1030, 30000]]}
# good example = {"genre": "Hip-Hop/Rap", "idxs": [[176, 7, 86, 5, 3484, 4, 4569], [49, 5743, 40, 300], [30000, 21, 16, 11, 604], [30000, 21, 287, 28, 19089, 6], [1, 227, 8, 16, 11, 291], [346, 2, 342, 1229, 1695], [115, 2125, 21, 16, 2, 3544], [13637, 21, 3092, 51, 11, 30000], [1921, 1, 19, 872, 21, 34, 2, 2255], [26552, 8138, 51, 12, 4802], [392, 30000, 5588, 66, 94, 227, 8], [179, 11, 260, 855], [1, 62, 8, 29, 244, 1, 19, 1126, 21, 12, 5, 10436], [1, 19, 139, 6740, 90, 156, 19696, 30000], [], [1, 105, 5, 192, 79, 29, 2, 5172, 1, 55, 10801], [1, 19, 1126, 21, 3431, 35, 287, 10331], [2194, 5, 128, 243, 429], [145, 119, 200, 3, 41, 7853], [80, 29, 3, 38, 182, 20, 24, 252], [1, 38, 2, 2068, 16, 11, 82, 90, 1, 41, 220, 8], [183, 1, 111, 2532, 21, 243, 12, 30000, 28, 42, 608], [1, 134, 8, 7, 1227, 403, 1, 19, 19696, 30000], [130, 29, 232, 13046, 57, 6574, 11, 27496], [43, 3544, 24, 28, 2, 1792, 21], [80, 418, 6, 30000, 42, 404], [1, 703, 53, 669, 11, 2160, 9, 14379, 11, 3902], [123, 139, 388, 66, 1, 19, 417, 9, 193], [484, 2, 121, 366, 11, 268], [484, 11, 428, 215, 159], [123, 1084, 1001, 12, 2, 2506, 13, 1627], [282, 1, 76, 10, 3319], [164, 594, 4, 133, 6, 46, 1, 99, 10, 23], [102, 1, 129, 5, 4717, 1, 129, 5, 68, 227, 42, 8439], [80, 667, 2043], [1, 20, 10, 134, 3, 5162, 8912, 21, 6], [179, 24, 2, 739, 13, 148, 258, 97, 13779], [], [176, 7, 86, 5, 3484, 4, 4569], [49, 5743, 40, 300], [30000, 21, 16, 11, 604], [30000, 21, 287, 28, 19089, 21, 6], [1, 227, 8, 16, 11, 291], [346, 2, 342, 1229, 21, 1695], [115, 2125, 21, 16, 2, 3544], [13637, 21, 3092, 51, 11, 30000], [1921, 1, 19, 872, 21, 34, 2, 2255], [26552, 8138, 51, 12, 4802], [392, 30000, 5588, 66, 94, 227, 8], [179, 11, 260, 855], [1, 62, 8, 29, 244, 1, 19, 1126, 21, 12, 5, 10436], [1, 19, 139, 6740, 90, 156, 19696, 30000], [], [1, 19, 856, 21, 82, 79, 254, 14, 1, 307, 111, 127], [15, 29, 2, 261, 14, 55, 4891], [486, 2, 270, 261, 1464, 21], [1, 19, 2, 63, 14, 70, 192, 37, 4], [164, 1464, 21, 22117, 30000, 31, 27, 3], [47, 1, 20, 10, 196, 332], [1, 114, 10, 631], [183, 160, 261, 52, 10, 78], [83, 1, 52, 9411, 21, 1518, 50, 8], [30000, 0, 17385, 24, 16, 2, 3821], [1, 1045, 180, 8], [1, 20, 8, 28, 11, 561], [22, 41, 68, 133, 6, 843], [80, 93, 3, 1013, 21, 13046], [145, 23, 424, 3, 5162, 30000, 268], [1, 259, 12, 429, 28, 11, 3686], [1, 715, 263, 2, 6140, 9, 25631, 669, 21, 623, 14983], [80, 667, 2043, 4, 2, 8625, 1, 23, 6474, 21], [123, 7329, 7, 287, 1412], [49, 7, 5, 521, 93, 3, 20, 10, 631], [49, 7, 1227, 403, 64, 11, 14820, 57, 11, 20977], [30000, 21, 11, 3686, 51, 12, 2158, 79, 2, 14969], [30000, 16, 6536], [1921, 1, 19, 5646, 21, 175, 2, 8310], [1, 388, 8, 260, 370, 34, 5, 4335, 101, 4269], [], [176, 7, 86, 5, 3484, 4, 4569], [49, 5743, 40, 300], [30000, 21, 16, 11, 604], [30000, 21, 287, 28, 19089, 21, 6], [1, 227, 8, 16, 11, 291], [346, 2, 342, 1229, 21, 1695], [115, 2125, 21, 16, 2, 3544], [13637, 21, 3092, 51, 11, 30000], [1921, 1, 19, 872, 21, 34, 2, 2255], [26552, 8138, 51, 12, 4802], [392, 30000, 5588, 66, 94, 227, 8], [179, 11, 260, 855], [1, 62, 8, 29, 244, 1, 19, 1126, 21, 12, 5, 10436], [1, 19, 139, 6740, 90, 156, 19696, 30000]]}
# predicts rock example = {"genre": "Hip-Hop/Rap", "idxs": [[103, 518, 13, 261, 57, 30000], [95, 2, 1132, 656, 9645, 9, 2, 990, 656, 28142], [95, 7, 139, 615, 3, 20, 10, 446], [11583, 251, 4, 1122, 4, 3, 0], [22, 61, 427, 29, 44, 5, 404, 1476, 9, 5638], [15, 2, 11254, 13, 17, 482, 6834, 13916], [4594, 17, 11434, 4, 298, 2, 404], [15, 1, 298, 2, 404]]}
# YES! example = {"genre": "Hip-Hop/Rap", "idxs": [[30000, 0, 2237, 392, 1070, 0, 331, 79, 232, 3764, 14017], [8957, 8957, 8957], [1, 20, 10, 208, 9279, 14, 200, 232, 315], [4669, 235, 0, 1337, 13, 2, 476, 24, 0, 1, 858, 14795, 113, 212, 1, 858, 9279], [2167, 0, 770, 21, 34, 14, 5085, 27, 1, 133, 3], [554, 44, 471, 5085, 0, 38, 182, 23, 5, 20428, 18316], [8957, 0, 14, 7, 2, 139, 5085, 28, 6], [26, 30000, 0, 9124, 25, 22, 20, 10, 62, 4, 50, 812, 12, 5, 5020, 35, 63, 5, 160, 284], [164, 86, 131, 25103, 0, 90, 296, 1723, 3063], [1098, 29, 16, 119, 3, 105, 8], [], [30000, 393, 53, 9, 1, 20, 10, 50, 5, 1112, 1203, 13], [331, 2, 1084, 0, 61, 2, 1379, 9, 2, 2433, 13], [43, 804, 108, 427, 2, 302, 108, 24, 109], [183, 5, 226, 34, 6, 7547, 2555, 12, 2, 537, 26, 106, 25], [145, 23, 1437, 0, 235, 14, 1, 23, 1006, 182, 955, 0, 9], [331, 96, 35, 2, 270, 235, 26, 597, 25, 30000, 21, 5, 955], [5906, 29, 525, 9, 71, 480, 2700, 0, 34, 2, 4523], [43, 139, 2305, 395, 1, 177, 149, 52, 5, 5085, 26, 8651, 25], [409, 4452, 2, 9926, 90, 977, 4, 77, 1, 5739, 2571, 13, 593, 21, 26, 106, 25], [43, 13204, 30000, 0, 2, 268, 63, 13, 355, 13, 593, 21, 26, 106, 25], [122, 63, 2581, 1, 39, 444, 3, 1723, 212, 3, 676, 26, 597, 25], [1, 39, 322, 141, 1, 39, 984, 3, 405, 34, 30000, 26, 597, 25], [7438, 0, 298, 14, 505, 51, 34, 20184, 26, 46, 25], [12873, 2, 226, 413, 28, 856, 21, 34, 94, 590, 2564, 26, 8651, 25], [1, 19, 7946, 0, 2, 360, 8, 1265, 0, 1, 38, 182, 1133, 0, 30000, 48, 0, 5996, 21, 13, 5, 128, 5508, 26, 2681, 25], [13724, 52, 44, 125, 200, 0, 1, 19384, 15156, 8, 26, 597, 25], [3234, 2305, 21, 458, 12, 5, 30000, 5926, 26, 106, 25], [47, 82, 8, 52, 10, 1908, 28, 1908, 28, 160, 4, 88, 6, 51, 2, 3613], [1, 55, 68, 208, 38, 202, 0, 40, 1, 19, 71, 16, 1102, 26, 348, 25], [1, 44, 345, 2272, 0, 1408, 0, 90, 427, 125, 506, 4, 23, 30000, 26, 125, 506, 25], [288, 113, 1309, 19106, 212, 2, 1732, 12, 17, 2358], [1, 19, 19993, 0, 1932, 388, 3, 114, 10, 141, 66, 1, 3886, 26, 106, 25], [145, 34, 1, 157, 244, 26, 597, 25, 0, 1, 8115, 46, 1, 796, 26, 796, 25], [10787, 21, 235, 0, 67, 65, 5, 226, 5718, 894], [43, 1643, 3, 1093, 0, 67, 50, 3, 12, 2, 1643, 169, 1408, 26, 6183, 25], [2816, 4, 5511, 3, 955, 24, 825, 0, 20, 10, 298], [1, 19, 125, 216, 28, 2, 5333, 3, 39, 50, 878, 0, 1, 20, 10, 298], [1, 19, 91, 77, 0, 46, 7, 91, 1122, 93, 3, 1818, 11, 265], [491, 0, 1048, 67, 23, 34, 0, 1, 292, 11, 108], [304, 8, 4, 92, 427, 126, 4, 50, 483, 40, 257, 14], [124, 14, 235, 955, 1013, 0, 111, 78, 307, 14], [138, 426, 0, 134, 427, 5, 1030, 0, 88, 6, 32, 26, 8651, 25], [47, 94, 34, 46, 1, 19, 1464, 21, 40, 1382, 2, 322, 48, 37, 48, 9, 88, 6, 911, 26, 106, 25], [394, 0, 3, 134, 427, 5, 404, 0, 167, 10585], [164, 91, 168, 17, 505, 0, 1048, 12, 2, 10302, 5337, 21, 26, 5085, 25], [1098, 153, 0, 3, 44, 114, 10, 1638, 53, 766], [15, 12, 5, 973, 0, 3, 91, 23, 14, 1546, 14, 70, 114, 10, 337, 766, 26, 8651, 25], [729, 191, 16, 1397, 21, 3396, 9, 86, 1714], [1134, 1013, 21, 235, 14, 3, 76, 10, 1417], [1, 19, 2, 1184, 3, 76, 10, 396, 0, 40, 173, 3, 929], [2611, 21, 79, 6, 1567, 6098, 21, 173, 3, 4313], [246, 3, 4400, 21, 0, 127, 2, 537, 0, 669, 5, 334, 505, 1238, 12, 17, 1649, 26, 6638, 25], [13180, 21, 3, 52, 2569, 21, 5, 5622], [47, 427, 125, 506, 28, 3979, 26, 106, 25, 0, 40, 3, 788, 21, 42, 674], [562, 4, 442, 0, 2646, 67, 105, 297, 13, 2, 2985], [287, 2048, 0, 9, 383, 94, 65, 1456, 16, 17, 286], [2882, 48, 2882, 48, 105, 232, 303, 113, 669, 3, 0, 16, 17, 30000, 0, 226], [], [8957, 8957, 8957], [1, 20, 10, 208, 9279, 14, 200, 232, 315], [4669, 235, 0, 1337, 13, 2, 476, 24, 0, 1, 858, 14795, 113, 212, 1, 858, 9279], [2167, 0, 770, 21, 34, 14, 5085, 27, 1, 133, 3], [554, 44, 471, 5085, 0, 38, 182, 23, 5, 20428, 18316], [8957, 0, 14, 7, 2, 139, 5085, 28, 6], [26, 30000, 0, 9124, 25, 22, 20, 10, 62, 4, 50, 812, 12, 5, 5020, 35, 63, 5, 160, 284], [164, 86, 131, 25103, 0, 90, 296, 1723, 3063], [1098, 29, 16, 119, 3, 105, 8], [], [917, 0, 3, 32, 119, 31, 20, 72, 0, 8651, 0, 5513, 30000, 0, 3, 32, 119, 31, 20], [12934, 29, 101, 0, 2884, 29, 1709, 0, 322, 226, 0, 76, 10, 23, 899, 21, 2999], [], [30000, 114, 10, 5554, 21, 90, 5, 334, 1664]]}
#predicts pop example = {"genre": "Hip-Hop/Rap", "idxs": [[289, 7, 302, 30, 1081, 2, 2, 30000, 12, 2, 30000, 1114], [115, 2, 30000, 12, 2, 30000, 2747], [17634, 82], [43, 5810, 12, 2, 543, 12, 81, 922, 7, 2903], [103, 453, 136, 411, 2, 534, 12, 169, 30000], [21078, 16, 2, 2236, 566, 378], [3525, 14], [124, 17, 14820, 171, 44, 34, 3], [662, 7, 1283, 3], [89, 46, 3, 62, 4, 20, 93, 3, 100, 14, 8, 767, 3, 4], [564], [2503, 68, 850, 210, 113, 212, 8, 1074, 107, 64], [83, 254, 7, 1373], [47, 3, 12, 17, 4744, 7906, 2101, 2177], [1295, 46, 8, 691, 4, 86, 5, 1845, 1074, 250], [551, 1057, 127, 5, 1088, 14, 148, 76, 10, 61], [1, 32, 42, 1088, 10477], [80, 20, 3, 93, 17, 92, 1695, 2, 13823, 1729], [754, 24, 11045, 90, 31, 65, 30000, 8], [69, 55, 227, 8, 1112], [69, 369, 4, 305, 1575], [47, 155, 1505, 0, 107, 30], [4846, 1361, 5, 1151], [], [2060, 189, 3, 20, 10, 277, 0, 1, 41, 61], [2060, 189, 3, 20, 10, 77, 0, 797, 4, 6], [2060, 189, 3, 552, 114, 10, 2310], [112, 8352, 525, 90, 31, 114, 10, 9472], [], [2060, 189, 14, 3495, 3, 0, 88, 160, 23], [95, 205, 3, 3233, 28, 0, 231, 8], [], [124, 97, 24, 22216, 0, 3, 67, 61], [49, 882, 3, 4, 110, 8], [], [562, 1172, 0, 167, 8, 12, 12494, 8, 14081, 3], [1699, 637, 0, 906, 238, 0, 3, 38, 189, 4, 20], [358, 397, 0, 1385, 160, 108, 8, 16914, 3], [24333, 17, 222, 9, 224, 14, 585, 1385, 253], [22, 41, 133, 8, 71, 4, 277, 427, 225], [83, 3, 57, 555, 4, 220, 17, 1088], [47, 1385, 12, 3, 438, 12, 17, 30000], [15, 8, 347, 51, 16, 2, 9479, 315], [], [489, 2, 1015, 35, 2, 942, 94, 1587, 628], [489, 2, 108, 35, 2, 759, 16, 154, 165], [489, 2, 620, 35, 2, 4521, 9, 2, 2169], [489, 2, 447, 555, 4, 1704, 35, 56], [489, 2, 108, 35, 2, 556, 16, 154, 327], [489, 2, 136, 35, 81, 327, 16, 81, 3025], [513, 77, 210, 18, 1191, 27707], [102, 3, 906, 277, 8, 188, 8, 906, 3118], [844, 30], [], [2060, 189, 3, 20, 10, 277, 0, 1, 41, 61], [2060, 189, 3, 20, 10, 77, 0, 797, 4, 6], [2060, 189, 3, 552, 114, 10, 2310], [112, 8352, 525, 90, 31, 114, 10, 9472], [], [2060, 189, 14, 3495, 3, 0, 88, 160, 23], [95, 205, 3, 3233, 28, 0, 231, 8], [], [124, 97, 24, 22216, 0, 3, 67, 61], [49, 7, 736, 66, 1720, 434, 4, 4195, 8], [], [2933, 40, 6847, 16, 3516, 2, 18731], [22, 2900, 2, 12374, 14, 5079, 144], [288, 11, 265, 16, 11, 92, 66, 2, 1197, 2278], [1562, 435, 28, 144, 90, 1587, 168, 144], [122, 2, 2214, 13, 9248, 0, 30000], [3412, 30000, 9, 888, 30000], [4846, 2572, 2, 30000, 14, 19603, 144], [30000, 2, 30000], [89, 8, 17, 73, 9, 24378, 168, 3, 9754], [2883, 626, 17, 15844], [2144, 11232, 26453, 46, 30000, 144], [15, 188, 31, 485, 2124], [15, 137, 607, 30000, 144], [2914, 12, 19674, 7574, 1385, 12897], [491, 13, 144, 57, 407, 4, 215, 35, 8], [47, 148, 13, 144, 32, 1385, 995, 137, 2004], [], [2060, 189, 3, 20, 10, 277, 0, 1, 41, 61], [2060, 189, 3, 20, 10, 77, 0, 797, 4, 6], [2060, 189, 3, 552, 114, 10, 2310], [112, 8352, 525, 90, 31, 114, 10, 9472], [], [2060, 189, 14, 3495, 3, 0, 88, 160, 23], [95, 205, 3, 3233, 28, 0, 231, 8], [], [124, 97, 24, 22216, 0, 3, 67, 61], [49, 7, 736, 66, 1720, 434, 4, 4195, 8], [], [124, 97, 24, 22216, 3, 67, 61]]}

# Finding rock
#not bad example = {"genre": "Rock", "idxs": [[103, 469, 94, 860, 9, 6336], [15, 202, 65, 539], [123, 92, 24, 1368, 2063], [2164, 231, 6, 109, 4, 181], [], [183, 1, 110, 27, 26, 27, 25], [186, 0, 1, 110, 27, 26, 27, 25], [22, 77, 14, 551, 17, 72], [47, 1, 100, 34, 17610], [1, 110, 27], [], [1, 229, 40, 243, 4, 365, 3], [2933, 68, 1943], [484, 3, 177, 2901, 6, 106, 30], [551, 30000, 30000, 4, 12718], [], [47, 1, 110, 27, 26, 27, 25], [4956, 0, 1, 110, 27, 26, 27, 25], [22, 77, 14, 551, 17, 72], [47, 1, 100, 34, 17610], [1, 110, 27], [], [43, 469, 14, 3, 57, 4299], [484, 68, 88, 3, 581], [207, 357, 57, 40, 9007], [47, 766, 70, 945, 34, 1035], [], [6636, 414, 397, 75, 5200], [6636, 414, 397, 75, 1363], [306, 113, 101, 13, 42, 235, 9, 30000, 433, 11, 165], [], [47, 1, 110, 27, 26, 27, 25], [237, 0, 1, 110, 27, 26, 27, 25], [22, 157, 1, 52, 17, 4423], [47, 1, 100, 34, 17610], [], [43, 97, 14, 3, 57, 482], [484, 68, 88, 3, 581], [207, 357, 57, 40, 9007], [47, 766, 70, 945, 34, 1035], [], [1, 110, 27, 26, 27, 25], [47, 0, 1, 110, 27, 26, 27, 25], [186, 0, 1, 110, 27, 26, 27, 25, 1463], [186], [47, 1, 110, 27], [47, 1, 110, 27], [3147, 0, 597], [47, 1, 110, 27, 26, 90, 1, 110, 27, 25], [917, 0, 72], [47, 1, 110, 27], [406, 3, 147, 148], [1, 110, 27, 26, 90, 1, 110, 27, 25], [1, 1945, 3, 72], [47, 1, 110, 27], [1, 110, 0, 1, 110, 0, 1, 110, 27]]}
# she example = {"genre": "Rock", "idxs": [[120, 7, 38, 2, 971, 12, 81, 92], [47, 81, 142, 70, 30000], [120, 7, 91, 45, 998, 17, 92, 626], [74, 81, 638, 70, 208, 1145, 6], [], [1, 39, 105, 11, 2670], [195, 1281, 24], [80, 3817, 4, 6], [120, 39, 68, 547, 6], [120, 166, 10, 2030, 6], [120, 7, 169, 883, 1446, 4, 6], [], [120, 7, 38, 2, 971, 12, 81, 92], [112, 0, 33, 0, 42, 1, 76, 10, 224], [120, 7, 91, 45, 998, 17, 92, 626], [112, 0, 33, 21024, 67, 87, 6136], [], [1, 76, 10, 224, 14, 87, 39, 177, 177, 54], [554, 66, 87, 10254, 9, 697, 87, 763, 6, 40], [120, 39, 68, 547, 6], [120, 166, 10, 2030, 6], [1075, 76, 10, 3, 61], [], [120, 7, 38, 2, 971, 12, 81, 92], [74, 0, 33, 0, 33, 0, 33, 0, 42, 1, 76, 10, 224], [120, 7, 91, 45, 998, 17, 92, 626], [112, 33, 21024, 67, 87, 6136], [], [89, 10, 105, 2670, 93, 17, 1281, 24], [80, 3817, 4, 3], [120, 39, 68, 547, 6], [120, 166, 10, 2030, 6], [120, 7, 169, 883, 1446, 4, 6], [], [120, 7, 38, 2, 971, 12, 81, 92], [74, 0, 33, 0, 33, 0, 33, 0, 33, 42, 1, 76, 10, 224], [120, 7, 91, 45, 998, 17, 92, 626], [112, 0, 33, 21024, 67, 87, 6136], [], [120, 7, 38, 2, 971, 12, 81, 92], [112, 87, 7, 169, 883, 1446, 4, 6], [120, 7, 38, 2, 971, 12, 81, 92], [112, 87, 7, 169, 883, 1446, 4, 6]]}
# keep
example = {"genre": "Rock", "idxs": [[22, 39, 68, 32, 119, 200, 1, 208, 27, 3], [22, 39, 68, 32, 119, 200, 1, 208, 297], [1075, 20, 3, 62, 4, 32, 5, 1155], [89, 3, 921, 71, 4, 133, 5928, 5928, 5928, 1085], [176, 6, 1485, 12, 17, 1540], [576, 2, 357, 3, 159, 4, 196], [1, 19, 12, 27, 35, 3, 4509], [1, 55, 803, 2, 1155, 28, 5, 1388, 152, 303], [983, 441, 44, 31, 303], [1075, 20, 3, 62, 4, 32, 5, 1155], [89, 3, 921, 71, 4, 133, 5928, 5928, 5928, 1085], [176, 6, 1485, 12, 17, 1540], [576, 2, 357, 3, 159, 4, 196], [1, 19, 12, 27, 35, 3, 4509]]}
# also good example = {"genre": "Rock", "idxs": [[103, 3257, 24, 12, 9812, 0, 5, 16211, 24, 12], [112, 6576, 16, 2, 30000, 461], [145, 11, 291, 521], [43, 1080, 57, 384, 9, 2970], [43, 3122, 227, 13, 1757], [16902, 1058, 2, 543], [2432, 1, 783, 9, 5225], [5525, 64, 2, 465], [123, 779, 2, 139, 2419, 141], [12399, 30000, 141], [123, 225, 3705, 33, 2952], [30000, 117, 11, 6395], [26412, 33, 1288], [436, 78, 24, 33, 26693], [123, 756, 1901, 4, 645], [], [26, 15, 1, 157, 84, 25, 80, 1, 1171, 11, 222, 37, 278], [6099, 485, 14, 2067, 263], [2293, 139, 26599, 266, 4484, 1097], [26, 15, 1, 157, 84, 25, 124, 1171, 13196], [854, 75, 2, 262], [103, 262, 14, 1896, 16, 139, 148], [69, 2, 10504, 57, 29, 12, 63], [], [1, 196, 5, 1800, 12, 2, 1951], [489, 5, 1733, 13, 5, 1041], [1, 100, 2, 360, 14, 52, 1412], [218, 14, 624, 101, 13, 3373], [103, 3769, 19471, 12, 2, 989], [698, 94, 2312, 2, 1277], [103, 223, 4, 294, 6, 75, 11, 4767], [15, 6194, 6, 97, 5923], [], [1420, 65, 111, 417], [218, 5, 1323, 400], [19938, 11, 222], [112, 56, 28, 10165], [501, 10, 38, 33, 56], [], [1420, 65, 111, 417], [218, 5, 1323, 400], [19938, 11, 222], [112, 56, 28, 10165], [501, 10, 38, 33, 56], [], [26, 15, 1, 157, 84, 25, 80, 1, 1171, 11, 222, 37, 278], [6099, 485, 14, 2067, 263], [2293, 139, 26599, 266, 4484, 1097], [26, 15, 1, 157, 84, 25, 124, 1171, 13196], [854, 75, 2, 262], [103, 262, 14, 1896, 16, 139, 148], [69, 2, 10504, 57, 29, 12, 63], [], [1, 295, 51, 4, 287], [11461, 139, 154, 4286], [10696, 2486, 9, 30000], [1, 55, 3509, 11, 291, 2660], [1, 295, 51, 4, 287], [11461, 139, 154, 4286], [10696, 2486, 9, 30000], [1, 55, 3509, 11, 291, 2660], [], [26, 15, 1, 157, 84, 25, 80, 1, 1171, 11, 222, 37, 278], [6099, 485, 14, 2067, 263], [2293, 139, 26599, 266, 4484, 1097], [26, 15, 1, 157, 84, 25, 124, 1171, 13196], [854, 75, 2, 262], [103, 262, 14, 1896, 16, 139, 148], [69, 2, 10504, 57, 29, 12, 63], [], [26, 15, 1, 157, 84, 25, 80, 1, 1171, 11, 222, 37, 278], [6099, 485, 14, 2067, 263], [2293, 139, 26599, 266, 4484, 1097], [26, 15, 1, 157, 84, 25, 69, 36, 1171, 13196, 26, 1, 3509, 25], [854, 75, 2, 262, 26, 1, 3509, 25], [103, 262, 14, 1896, 16, 139, 148, 26, 1, 3509, 25], [69, 2, 10504, 57, 29, 12, 63, 26, 1, 3509, 11, 291, 2660, 25], [], [1420, 55, 111, 417, 16, 5, 1323, 400], [19938, 11, 222], [112, 56, 28, 10165], [501, 10, 38, 33, 56]]}


savefile = "example_" + example["genre"] + ".txt"
#savefile = "example_hiphoprap.txt"
# Get the words from this song
# Create word dict
word_dict = {}
with open('myvectors.txt','r') as f:
    for i, line in enumerate(f):
        inputs = line.split()
        word = inputs[0]
        word_dict[i] = word

idxs = example['idxs']
words = []
for l in idxs:
    if len(l) == 0:
        words.append([])
    else:
        words.append([word_dict[idx] for idx in l])

#print(words)


# Create a dict for genres
genre2idx = {}
idx2genre = {}
with open('flatdata/filteredgenrecounts.txt','r') as f:
    for i, line in enumerate(f):
        genre = ' '.join(line.split()[:-1])
        genre2idx[genre] = i
        idx2genre[i] = genre

num_genres = len(genre2idx)
n_classes = num_genres
print "Number of genres:", num_genres
print "Finished loading genres"

def pad_line(line):
    '''Pads/truncates a song line to have length MAX_WORDS'''
    size = min(MAX_WORDS, len(line))
    to_add = MAX_WORDS-size
    new_line = line[:size] + to_add*[vocab_size+1]
    return new_line


def format_data(d):
    '''Formats a datapoint to have correct length and numpy array format'''

    # Use this zero vector when padding lines.
    zero_line_vector = MAX_WORDS*[vocab_size+1]
    ret = [pad_line(line) for line in d if len(line) > 0]

    # Now pad song to have correct number of lines
    size = min(MAX_LINES, len(ret))
    to_add = MAX_LINES - size
    ret = ret[:size]
    ret.extend(to_add*[zero_line_vector])
    ret = np.array(ret)

    return ret


# Get train data
test_labels = np.zeros((1,))
test_data = np.zeros((1, MAX_LINES, MAX_WORDS))
# Add label
test_labels[0] = genre2idx[example['genre'].encode('utf-8')]
# Add datapoint
test_data[0,:,:] = format_data(example['idxs'])
my_test_label = test_labels[0]
my_test_data = np.array(test_data[0,:,:], dtype=int)

print "Finished inputting test data"

class AttLayer(Layer):
    def __init__(self, **kwargs):
        self.hidden_dim = attention_size
        super(AttLayer,self).__init__(**kwargs)

    def build(self, input_shape):
        self.W = self.add_weight(shape=(input_shape[-1], self.hidden_dim), initializer = 'he_normal', trainable=True)
        self.bw = self.add_weight(shape=(self.hidden_dim,), initializer = 'zero', trainable=True)
        self.uw = self.add_weight(shape=(self.hidden_dim,), initializer = 'he_normal', trainable=True)
        self.trainable_weights = [self.W, self.bw, self.uw]
        super(AttLayer,self).build(input_shape)

    def call(self, x, mask=None):
        x_reshaped = tf.reshape(x, [K.shape(x)[0]*K.shape(x)[1], K.shape(x)[-1]])
        ui = K.tanh(K.dot(x_reshaped, self.W) + self.bw)
        intermed = tf.reduce_sum(tf.multiply(self.uw, ui), axis=1)

        weights = tf.nn.softmax(tf.reshape(intermed, [K.shape(x)[0], K.shape(x)[1]]), dim=-1)
        weights = tf.expand_dims(weights, axis=-1)

        weighted_input = x*weights
        return K.sum(weighted_input, axis=1)

    def get_output_shape_for(self, input_shape):
        return (input_shape[0], input_shape[2])


model = load_model(path2model, custom_objects={"AttLayer":AttLayer})
weights = model.get_weights()
conf = model.get_config()
L = weights[0] # embedding matrix 30002 by 100

# LAYER - BIDIRECTIONAL 1
W_z_fgru = weights[1] # Wz from fwd GRU 100 by 50
U_z_fgru = weights[2] # Uz from fwd GRU 50 by 50
b_z_fgru = weights[3] # bz from fwd GRU 50 by 1
W_r_fgru = weights[4] # Wr from fwd GRU 100 by 50
U_r_fgru = weights[5] # Ur from fwd GRU 50 by 50
b_r_fgru = weights[6] # br from fwd GRU 50 by 1
W_h_fgru = weights[7] # Wh from fwd GRU 100 by 50
U_h_fgru = weights[8] # Uh from fwd GRU 50 by 50
b_h_fgru = weights[9] # bh from fwd GRU 50 by 1

W_z_bgru = weights[10] # Wz from bwd GRU 100 by 50
U_z_bgru = weights[11] # Uz from bwd GRU 50 by 50
b_z_bgru = weights[12] # bz from bwd GRU 50 by 1
W_r_bgru = weights[13] # Wr from bwd GRU 100 by 50
U_r_bgru = weights[14] # Ur from bwd GRU 50 by 50
b_r_bgru = weights[15] # br from bwd GRU 50 by 1
W_h_bgru = weights[16] # Wh from bwd GRU 100 by 50
U_h_bgru = weights[17] # Uh from bwd GRU 50 by 50
b_h_bgru = weights[18] # bh from bwd GRU 50 by 1

# ATT LAYER 1
W_att = weights[19] # 100 by 100
bw_att = weights[20] # 100 by 1
uw_att = weights[21] # 100 by 1

# LAYER - BIDIRECTIONAL 2
W_z_fgrusent = weights[22] # Wz from fwd GRU 100 by 50
U_z_fgrusent = weights[23] # Uz from fwd GRU 50 by 50
b_z_fgrusent = weights[24] # bz from fwd GRU 50 by 1
W_r_fgrusent = weights[25] # Wr from fwd GRU 100 by 50
U_r_fgrusent = weights[26] # Ur from fwd GRU 50 by 50
b_r_fgrusent = weights[27] # br from fwd GRU 50 by 1
W_h_fgrusent = weights[28] # Wh from fwd GRU 100 by 50
U_h_fgrusent = weights[29] # Uh from fwd GRU 50 by 50
b_h_fgrusent = weights[30] # bh from fwd GRU 50 by 1

W_z_bgrusent = weights[31] # Wz from bwd GRU 100 by 50
U_z_bgrusent = weights[32] # Uz from bwd GRU 50 by 50
b_z_bgrusent = weights[33] # bz from bwd GRU 50 by 1
W_r_bgrusent = weights[34] # Wr from bwd GRU 100 by 50
U_r_bgrusent = weights[35] # Ur from bwd GRU 50 by 50
b_r_bgrusent = weights[36] # br from bwd GRU 50 by 1
W_h_bgrusent = weights[37] # Wh from bwd GRU 100 by 50
U_h_bgrusent = weights[38] # Uh from bwd GRU 50 by 50
b_h_bgrusent = weights[39] # bh from bwd GRU 50 by 1

# ATTLAYER 2
W_att2 = weights[40] # W from attention 100 by 100
bw_att2 = weights[41] # bw from attention 100 by 1
uw_att2 = weights[42] # uw from attention 100 by 1

# DENSE LAYER
W_dense = weights[43] # W from dense layer 100 by 117
b_dense = weights[44] # b from dense layer 117 by 1



word_weights = np.zeros((MAX_LINES, MAX_WORDS))
line_weights = np.zeros((MAX_LINES,))
# Run through to get the weights
x = L[my_test_data]
line_vectors = np.zeros((MAX_LINES, attention_size))
for i in range(MAX_LINES):
    # for each line
    prevh = np.zeros((n_hidden,))
    prevh_back = np.zeros((n_hidden,))
    hidden_states_for = np.zeros((MAX_WORDS, n_hidden))
    hidden_states_back = np.zeros((MAX_WORDS, n_hidden))
    for j in range(MAX_WORDS):
        # forward GRU
        xi = x[i,j,:]
        zt = sigmoid(np.dot(xi, W_z_fgru) + np.dot(prevh, U_z_fgru) + b_z_fgru)
        rt = sigmoid(np.dot(xi, W_r_fgru) + np.dot(prevh, U_r_fgru) + b_r_fgru)
        htildet = np.tanh(np.dot(xi, W_h_fgru) + np.multiply(rt, np.dot(prevh, U_h_fgru)) + b_h_fgru)
        ht_for = np.multiply(1-zt, prevh) + np.multiply(zt, htildet)
        prevh = ht_for

        # backward GRU
        xi_back = x[i, MAX_WORDS-j-1, :]
        zt = sigmoid(np.dot(xi_back, W_z_bgru) + np.dot(prevh_back, U_z_bgru) + b_z_bgru)
        rt = sigmoid(np.dot(xi_back, W_r_bgru) + np.dot(prevh_back, U_r_bgru) + b_r_bgru)
        htildet = np.tanh(np.dot(xi_back, W_h_bgru) + np.multiply(rt,np.dot(prevh_back, U_h_bgru)) + b_h_bgru)
        ht_back = np.multiply(1 - zt, prevh_back) + np.multiply(zt, htildet)
        prevh_back = ht_back

        hidden_states_for[j,:] = ht_for
        hidden_states_back[MAX_WORDS-j-1,:] = ht_back

    hidden_states = np.zeros((MAX_WORDS, attention_size))
    uis = np.zeros((MAX_WORDS,attention_size))
    relvs = np.zeros((MAX_WORDS,))
    for j in range(MAX_WORDS):
        hidden_states[j,:] = np.concatenate([hidden_states_for[j,:], hidden_states_back[j,:]])
        uis[j,:] = np.tanh(np.dot(hidden_states[j,:], W_att) + bw_att)
        relvs[j] = np.dot(uis[j,:],uw_att)

    alphais = softmax(relvs)
    word_weights[i,:] = alphais
    s = np.zeros((attention_size,))
    for j in range(MAX_WORDS):
        s = s + alphais[j]*hidden_states[j,:]

    line_vectors[i,:] = s

## Now have got all line vectors can apply GRU/ATT on them
prevh = np.zeros((n_hidden,))
prevh_back = np.zeros((n_hidden,))
hidden_states_for = np.zeros((MAX_LINES, n_hidden))
hidden_states_back = np.zeros((MAX_LINES, n_hidden))
for i in range(MAX_LINES):
    # forward GRU
    si = line_vectors[i, :]
    zt = sigmoid(np.dot(si, W_z_fgrusent) + np.dot(prevh, U_z_fgrusent) + b_z_fgrusent)
    rt = sigmoid(np.dot(si, W_r_fgrusent) + np.dot(prevh, U_r_fgrusent) + b_r_fgrusent)
    htildet = np.tanh(np.dot(si, W_h_fgrusent) + np.multiply(rt, np.dot(prevh,U_h_fgrusent)) + b_h_fgrusent)
    ht_for = np.multiply(1 - zt, prevh) + np.multiply(zt, htildet)
    prevh = ht_for

    # backward GRU
    si_back = line_vectors[MAX_LINES - i - 1, :]
    zt = sigmoid(np.dot(si_back, W_z_bgrusent) + np.dot(prevh_back, U_z_bgrusent) + b_z_bgrusent)
    rt = sigmoid(np.dot(si_back, W_r_bgrusent) + np.dot(prevh_back, U_r_bgrusent) + b_r_bgrusent)
    htildet = np.tanh(np.dot(si_back, W_h_bgrusent) + np.multiply(rt,np.dot(prevh_back, U_h_bgrusent)) + b_h_bgrusent)
    ht_back = np.multiply(1 - zt, prevh_back) + np.multiply(zt, htildet)
    prevh_back = ht_back

    hidden_states_for[i, :] = ht_for
    hidden_states_back[MAX_WORDS - i - 1, :] = ht_back

hidden_states = np.zeros((MAX_LINES, attention_size))
uis = np.zeros((MAX_LINES,attention_size))
relvs = np.zeros((MAX_LINES,))
for i in range(MAX_LINES):
    hidden_states[i,:] = np.concatenate([hidden_states_for[i,:], hidden_states_back[i,:]])
    uis[i,:] = np.tanh(np.dot(hidden_states[i,:], W_att2) + bw_att2)
    relvs[i] = np.dot(uis[i,:],uw_att2)

alphais = softmax(relvs)
line_weights = alphais
s = np.zeros((attention_size,)) # represents the document vector!
for i in range(MAX_LINES):
    s = s + alphais[i]*hidden_states[i,:]

# Now use dense layer for prediction

p = softmax(np.dot(s, W_dense) + b_dense)

preds = model.predict(test_data)

## ANALYSIS

predmax = np.argmax(preds)

#print "Prediction:", preds[0]
#print len(preds[0])
evals = model.evaluate(test_data, test_labels)
print "Test accuracy:", evals
print "Predicted Class:", idx2genre[predmax]
print "True Class:", example["genre"]

# Now create text file with weights and lyrics!
with open(savefile,'w') as g:
    no_lines = min(MAX_LINES,len(words))
    correctstring = "Correct prediction: " + str(evals[1]) + "\n"
    g.write(correctstring)
    for i in range(no_lines):
        g.write("{:10.4f}".format(line_weights[i]))

        g.write(" -  ")
        no_words = min(MAX_WORDS, len(words[i]))
        for j in range(no_words):
            g.write("{:10}".format(words[i][j]))

        g.write('\n')
        g.write("{:10}".format(""))

        for j in range(no_words):
            g.write("{:10.4f}".format(word_weights[i,j]))

        g.write("\n")

# Now print the top 5 lines with their weights
no_lines = min(MAX_LINES, len(words))
line_weights_sub = line_weights[:no_lines]
line_weights_sorted = line_weights_sub.argsort()
top5_idxs = line_weights_sorted[-5:][::-1]
top5 = line_weights_sub[top5_idxs]
top5_word_weights = word_weights[top5_idxs,:]
top5_words = []
for i in top5_idxs:
    top5_words.append(words[i])

for i in range(5):
    no_words = min(MAX_WORDS, len(top5_words[i]))
    str2print = "{:10.4f}".format(top5[i]) + "{:4}".format("")
    for j in range(no_words):
        str2print += "{:10}".format(top5_words[i][j])
    print str2print
    str2print = ""
    str2print += "{:10}".format("")
    for j in range(no_words):
        str2print += "{:10.4f}".format(top5_word_weights[i,j])
    print str2print


# Do heatmap viz
# Plot it out
fig, ax = plt.subplots()
fig.set_size_inches(15, 5)
heatmap = ax.pcolor(top5_word_weights,cmap='RdBu')
plt.colorbar(heatmap)
titlestring = "Predicted Class: " + idx2genre[predmax] + ", True Class: " + example["genre"]
plt.title(titlestring)
#plt.colorbar()

# Format
fig = plt.gcf()


# turn off the frame
ax.set_frame_on(False)

# put the major ticks at the middle of each cell
ax.set_yticks(np.arange(top5_word_weights.shape[0]) + 0.5, minor=False)

# want a more natural, table-like display
ax.invert_yaxis()

# Set the labels

# note I could have used nba_sort.columns but made "labels" instead
ax.set_yticklabels(np.round(top5,3), minor=False)

# rotate the
plt.xticks(rotation=90)

ax.grid(False)

# Turn off all the ticks
ax = plt.gca()

for t in ax.xaxis.get_major_ticks():
    t.tick1On = False
    t.tick2On = False
for t in ax.yaxis.get_major_ticks():
    t.tick1On = False
    t.tick2On = False

# Add word annotations
for y in range(5):
    no_words = min(MAX_WORDS, len(top5_words[y]))
    for x in range(no_words):
        plt.text(x + 0.5, y + 0.5, top5_words[y][x].decode('utf-8'),
                 horizontalalignment='center',
                 verticalalignment='center',
                 )

plt.savefig('rock_example.pdf')
#plt.show()